To showcase High Availability, we'll simulate a primary node failure and observe how the replica set handles the situation by promoting a secondary to primary.

Note:**
Simulating a real primary node failure requires manipulating the Docker containers. Proceed with caution and ensure that you're operating in a safe environment, as this may disrupt existing data if not handled properly.

Steps to Simulate Failover:
Check Current Replica Set Status:

e
docker exec -it mongo-primary mongo
In the Mongo shell:


rs.status()
Expected Output:

You should see one primary (mongo-primary) and two secondaries (mongo-secondary1, mongo-secondary2).

Stop the Primary Node:

In a separate terminal, stop the primary MongoDB container.

docker stop mongo-primary
Observe Replica Set Election:

Wait a few moments for the replica set to detect the primary's failure and elect a new primary (either mongo-secondary1 or mongo-secondary2).


docker exec -it mongo-secondary1 mongo
In the Mongo shell:


rs.status()
Expected Output:

One of the secondary nodes (mongo-secondary1 or mongo-secondary2) should now be the primary.

Run the Node.js Application Again:

With the original primary stopped and a new primary elected, run the app.js script again to perform operations.


node app.js
Expected Behavior:

The application should automatically connect to the new primary.
CRUD operations should proceed without interruption.
No manual changes are needed in the application code.
Restart the Original Primary:

To restore the replica set to its original state, restart the primary container.


docker start mongo-primary
The restarted node will rejoin the replica set as a secondary.

Verify Replica Set Status:


docker exec -it mongo-secondary1 mongo
In the Mongo shell:

javascript
Copy code
rs.status()
Expected Output:

The replica set should now include the restarted primary node as a secondary, maintaining high availability.

Analyzing the Example
Replication Mechanics
Data Synchronization:

The primary node handles all write operations.
Secondary nodes replicate data from the primary in near real-time.
Automatic Failover:

If the primary node becomes unavailable, the replica set automatically elects a new primary from the secondaries.
This ensures that the database remains writable without manual intervention.
High Availability Benefits
Continuous Operation:

Even if one node fails, the system remains operational by promoting a secondary to primary.
Fault Tolerance:

Multiple copies of data across nodes protect against data loss.
Load Distribution:

Read operations can be distributed across secondaries, enhancing performance.
Node.js Driver Features Supporting HA
Multiple Hosts in Connection URI:

Including multiple MongoDB instances in the connection string allows the driver to detect and connect to the current primary automatically.
Automatic Reconnection:

The driver manages reconnections in case of node failures, ensuring minimal downtime.
Read Preference Settings:

Configurable settings determine where read operations are directed (e.g., primary, secondaries, nearest).
